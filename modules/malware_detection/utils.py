import os
import math
import pefile


def calculate_entropy(data):
    """Calculate the entropy of a given data chunk"""
    if not data:
        return 0.0

    entropy = 0.0
    for x in range(256):
        p_x = float(data.count(bytes([x]))) / len(data)
        if p_x > 0:
            entropy += - p_x * math.log(p_x, 2)

    return entropy


def get_pe_info(file_path):
    """Extract PE file information for heuristic analysis"""
    try:
        pe = pefile.PE(file_path)

        # Count imports
        import_count = 0
        if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                import_count += len(entry.imports)

        # Check section names for packers
        packer_indications = []
        for section in pe.sections:
            section_name = section.Name.decode('utf-8', errors='ignore').strip('\x00')
            if any(packer in section_name for packer in ['UPX', 'ASPack', 'PECompact']):
                packer_indications.append(section_name)

        pe.close()

        return {
            'import_count': import_count,
            'packer_indications': packer_indications,
            'is_pe': True
        }
    except:
        return {'is_pe': False}


def is_executable(file_path):
    """Check if a file is likely executable"""
    try:
        with open(file_path, 'rb') as f:
            header = f.read(2)
            return header == b'MZ'
    except:
        return False