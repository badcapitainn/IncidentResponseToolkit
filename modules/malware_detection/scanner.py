import os
import yara
from datetime import datetime
from toolkit.models import MalwareDetectionResult


class MalwareScanner:
    def __init__(self):
        self.rules_path = os.path.join(os.path.dirname(__file__), 'rules')
        self.rules = self._compile_rules()

    def _compile_rules(self):
        """Compile all YARA rules from the rules directory"""
        rule_files = [
            os.path.join(self.rules_path, f)
            for f in os.listdir(self.rules_path)
            if f.endswith('.yar')
        ]

        try:
            return yara.compile(filepaths={
                os.path.basename(f).split('.')[0]: f for f in rule_files
            })
        except yara.SyntaxError as e:
            raise Exception(f"YARA rule compilation error: {str(e)}")

    def scan_file(self, file_path):
        """Scan a single file for malware"""
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"File not found: {file_path}")

        try:
            matches = self.rules.match(file_path)
            return matches
        except Exception as e:
            raise Exception(f"Scanning error: {str(e)}")

    def scan_directory(self, directory_path):
        """Scan all files in a directory recursively"""
        if not os.path.exists(directory_path):
            raise FileNotFoundError(f"Directory not found: {directory_path}")

        results = []
        for root, _, files in os.walk(directory_path):
            for file in files:
                full_path = os.path.join(root, file)
                try:
                    matches = self.scan_file(full_path)
                    if matches:
                        result = self._process_matches(full_path, matches)
                        results.append(result)
                except Exception as e:
                    print(f"Error scanning {full_path}: {str(e)}")

        return results

    def _process_matches(self, file_path, matches):
        """Process YARA matches and save to database"""
        # Create a result record
        result = MalwareDetectionResult.objects.create(
            file_path=file_path,
            scan_time=datetime.now(),
            is_malicious=True,
            malware_type=", ".join([m.rule for m in matches]),
            details=str(matches)
        )

        # Create an alert for admin
        Alert.objects.create(
            module="MALWARE",
            severity="HIGH",
            message=f"Malware detected in {file_path}: {result.malware_type}",
            details=str(matches)
        )

        return result
