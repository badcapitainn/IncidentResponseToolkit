import os
import yara
from datetime import datetime
from toolkit.models import MalwareDetectionResult, Quarantine
import shutil
from django.conf import settings


class MalwareScanner:
    def __init__(self):
        self.rules_path = os.path.join(os.path.dirname(__file__), 'rules')
        self.rules = self._compile_rules()

    def _compile_rules(self):
        """Compile all YARA rules from the rules directory"""
        rule_files = [
            os.path.join(self.rules_path, f)
            for f in os.listdir(self.rules_path)
            if f.endswith('.yar')
        ]

        try:
            return yara.compile(filepaths={
                os.path.basename(f).split('.')[0]: f for f in rule_files
            })
        except yara.SyntaxError as e:
            raise Exception(f"YARA rule compilation error: {str(e)}")

    def scan_file(self, file_path):
        """Scan a single file for malware"""
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"File not found: {file_path}")

        try:
            matches = self.rules.match(file_path)
            return matches
        except Exception as e:
            raise Exception(f"Scanning error: {str(e)}")

    def scan_directory(self, directory_path):
        """Scan all files in a directory recursively"""
        if not os.path.exists(directory_path):
            raise FileNotFoundError(f"Directory not found: {directory_path}")

        results = []
        for root, _, files in os.walk(directory_path):
            for file in files:
                full_path = os.path.join(root, file)
                try:
                    matches = self.scan_file(full_path)
                    if matches:
                        result = self._process_matches(full_path, matches)
                        results.append(result)
                except Exception as e:
                    print(f"Error scanning {full_path}: {str(e)}")

        return results

    def quarantine_file(self, file_path, detection_result):
        """Move a file to quarantine and return the quarantine record"""
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"File to quarantine not found: {file_path}")

        # Create quarantine filename (preserve extension)
        filename = os.path.basename(file_path)
        quarantine_path = os.path.join(settings.QUARANTINE_DIR, filename)

        # Handle duplicate filenames in quarantine
        counter = 1
        while os.path.exists(quarantine_path):
            name, ext = os.path.splitext(filename)
            quarantine_path = os.path.join(
                settings.QUARANTINE_DIR,
                f"{name}_{counter}{ext}"
            )
            counter += 1

        # Move the file
        shutil.move(file_path, quarantine_path)

        # Create quarantine record
        quarantine = Quarantine.objects.create(
            original_path=file_path,
            quarantine_path=quarantine_path,
            detection_result=detection_result
        )

        return quarantine

    def _process_matches(self, file_path, matches):
        """This method should handle quarantine"""
        # 1. Check if matches exist (malicious)
        if not matches:
            return None

        # 2. Create detection result record
        result = MalwareDetectionResult.objects.create(
            file_path=file_path,
            scan_time=datetime.now(),
            is_malicious=True,
            malware_type=", ".join([m.rule for m in matches]),
            details=str(matches)
        )

        # 3. Quarantine the file (THIS IS CRUCIAL)
        try:
            quarantine_record = self.quarantine_file(file_path, result)
            print(f"DEBUG: Quarantine successful - {quarantine_record}")  # Debug line
        except Exception as e:
            print(f"DEBUG: Quarantine failed - {str(e)}")  # Debug line
            raise e

        # 4. Create alert
        Alert.objects.create(
            module="MALWARE",
            severity="HIGH",
            message=f"Malware detected and quarantined: {file_path}",
            details=f"Type: {result.malware_type}\nQuarantined to: {quarantine_record.quarantine_path}"
        )

        return result

